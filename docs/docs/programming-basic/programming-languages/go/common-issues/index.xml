<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Novel CS</title>
    <link>https://example.org/docs/programming-basic/programming-languages/go/common-issues/</link>
    <description>Recent content on Novel CS</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://example.org/docs/programming-basic/programming-languages/go/common-issues/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://example.org/docs/programming-basic/programming-languages/go/common-issues/loop-variable-in-goroutine/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/programming-basic/programming-languages/go/common-issues/loop-variable-in-goroutine/</guid>
      <description>Summary of the Loop Variable Capturing Issue in Goroutines Closure # Problem Description # In Go, when using a for loop to iterate over elements and launching goroutines within the loop, a common issue arises due to the loop variable being reused across all iterations. Since the loop variable (req in our example) is allocated once and its memory address remains constant, all goroutines that capture this variable end up referencing the same memory location.</description>
    </item>
    
  </channel>
</rss>
