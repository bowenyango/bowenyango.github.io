<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Novel CS</title>
    <link>https://example.org/docs/aws/</link>
    <description>Recent content on Novel CS</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://example.org/docs/aws/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://example.org/docs/aws/kms/key-rotation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/aws/kms/key-rotation/</guid>
      <description>KMS Key Use in RDS/Secrets Manager: The KMS key encrypts the RDS credentials before they are stored in Secrets Manager.
Access Control: Access to the decrypted secret is controlled by AWS Identity and Access Management (IAM) policies. You need appropriate permissions both to access the secret in Secrets Manager and to use the associated KMS key for decryption.
Transparency for the User: The decryption process is designed to be transparent to the user.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://example.org/docs/aws/api-gateway/api-endpoint-type/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/aws/api-gateway/api-endpoint-type/</guid>
      <description> API endpoint type # Regional APIs are deployed in the current AWS Region. Edge-optimized APIs route requests to the nearest CloudFront Point of Presence. Private APIs are only accessible from VPCs. </description>
    </item>
    
    <item>
      <title></title>
      <link>https://example.org/docs/aws/api-gateway/domain-name/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/aws/api-gateway/domain-name/</guid>
      <description>Why Can&amp;rsquo;t I Create a Route53 Record Pointing Directly to the API Invoke URL? # The API Invoke URL provided by AWS API Gateway is a domain managed by AWS. This URL usually follows a pattern like {api-id}.execute-api.{region}.amazonaws.com. When you use a service like Route 53 to manage your DNS, creating a CNAME record that directly points to this invoke URL is not recommended for a couple of reasons:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://example.org/docs/aws/api-gateway/header/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/aws/api-gateway/header/</guid>
      <description>Forward Original Host from the Original Request # Today I met this issue, I tried to realize a request workflow like this:
User Request -&amp;gt; Route53 DNS(CloudFront Distribution of the API Gateway Custom Domain) -&amp;gt; API Gateway -&amp;gt; via HTTP request -&amp;gt; Public Application Load Balancer -&amp;gt; ECS instance
curl -H &amp;#34;Host: notification.dev.scrawlrapi.com&amp;#34; https://notification.dev.scrawlrapi.com/status When I tried to send request like this, the ECS instance indeed received the request but with a modified host header.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://example.org/docs/aws/api-gateway/http-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/aws/api-gateway/http-api/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://example.org/docs/aws/api-gateway/payload-limitation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/aws/api-gateway/payload-limitation/</guid>
      <description>API Gateway has a hard limitation of payload as 10MB # Reference: # https://docs.aws.amazon.com/apigateway/latest/developerguide/limits.html</description>
    </item>
    
    <item>
      <title></title>
      <link>https://example.org/docs/aws/api-gateway/redirect-http-to-https/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/aws/api-gateway/redirect-http-to-https/</guid>
      <description>How to redirect API gateway http to https? # When use API Gateway HTTP API with custom domains(regional), it only works on HTTPS and not on HTTP.
For example, if you have a custom domain like www.example.com, and in your reout53 DNS record you redirect that domain to the involke URL of API gateway, it works fine when a user access you website via https://www.example.com. However, because the api gateway doesn&amp;rsquo;t support http requests, it will raise ERR_CONNECTION_REFUSED error.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://example.org/docs/aws/api-gateway/vpc-links/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/aws/api-gateway/vpc-links/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://example.org/docs/aws/iam/all-actions-resources-conditions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/aws/iam/all-actions-resources-conditions/</guid>
      <description>Reference: # https://docs.aws.amazon.com/service-authorization/latest/reference/reference_policies_actions-resources-contextkeys.html</description>
    </item>
    
    <item>
      <title></title>
      <link>https://example.org/docs/aws/iam/definition/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/aws/iam/definition/</guid>
      <description>How to create a IAM role with proper policy using terraform? # Trust Policy: Defines who can assume the role. Role: Defines the role itself. Permissions Policy: Defines what the role can do by specifying actions and resources. Policy Attachment: Attaches the permissions policy to the role. # Step 1: Define the trust policy data &amp;#34;aws_iam_policy_document&amp;#34; &amp;#34;assume_role&amp;#34; { statement { effect = &amp;#34;Allow&amp;#34; principals { type = &amp;#34;Service&amp;#34; identifiers = [&amp;#34;lambda.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://example.org/docs/aws/iam/iam-policy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/aws/iam/iam-policy/</guid>
      <description>Difference between Trust Policy and Permission Policy # In AWS IAM, there are two main types of policies that are associated with roles:
Trust Policy: Specifies who or what can assume the role. Permissions Policy: Specifies what actions the role can perform and on which resources. Trust Policy # Purpose: Defines the entities that are trusted to assume the role. Attachment: Each role can have only one trust policy. Example: Allowing AWS Lambda to assume a role.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://example.org/docs/aws/lambda/basic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/aws/lambda/basic/</guid>
      <description>What is a handler? # In AWS Lambda, a handler is a function within your code that AWS Lambda calls to start execution of your function. When you create a Lambda function, you specify a handler, which AWS Lambda uses to know which function to invoke when the Lambda function is triggered. The handler is the entry point for your Lambda function and is responsible for processing the input event and providing an output.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://example.org/docs/aws/lambda/custom_domain/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/aws/lambda/custom_domain/</guid>
      <description>How to deploy a custom domain for the auto-generated Lambda invoke URL? # 06 APR 2022 â€” AWS announced an exciting news of Built-in HTTPS Endpoints for Lambda functions. You can read the original post .
Before this announcement, to expose an HTTP endpoint with a custom domain for your lambda backend you have to use the following AWS resources:
Lambda (application backend) API Gateway (to expose HTTP endpoint) Cloudfront distribution Route 53 Fortunately, with AWS Lambda URLs you no longer need the API Gateway !</description>
    </item>
    
    <item>
      <title></title>
      <link>https://example.org/docs/aws/lambda/layer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/aws/lambda/layer/</guid>
      <description>To upload custom runtime environment, libraries and configurations for Lambda function # Reference: # https://docs.aws.amazon.com/lambda/latest/dg/packaging-layers.html#packaging-layers-paths</description>
    </item>
    
    <item>
      <title></title>
      <link>https://example.org/docs/aws/load-balancer/application-load-balancer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/aws/load-balancer/application-load-balancer/</guid>
      <description>How Application Load Balancers work # Clients make requests to your application. The listeners in your load balancer receive requests matching the protocol and port that you configure. The receiving listener evaluates the incoming request against the rules you specify, and if applicable, routes the request to the appropriate target group. You can use an HTTPS listener to offload the work of TLS encryption and decryption to your load balancer.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://example.org/docs/aws/s3/bucket/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/aws/s3/bucket/</guid>
      <description>Block public access (bucket settings) # BlockPublicAcls - This prevents any new ACLs to be created or existing ACLs being modified which enable public access to the object. With this alone existing ACLs will not be affected. IgnorePublicAcls - Any ACLs actions that exist with public access will be ignored, this does not prevent them being created but prevents their effects. BlockPublicPolicy - This prevents a bucket policy containing public actions from being created or modified on an S3 bucket, the bucket itself will still allow the existing policy.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://example.org/docs/aws/ssm/ssm-agent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/aws/ssm/ssm-agent/</guid>
      <description>QUESTION # What user does AWS SSM RUN COMMAND use?
ANSWER # The SSM Agent typically runs as the root user. This means that commands executed through SSM Run Command have root-level privileges, allowing them to perform a wide range of system-level operations.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://example.org/docs/aws/waf/sql-injection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/aws/waf/sql-injection/</guid>
      <description>What is the difference between different options in field_to_match in the statement block? # When setting up a rule in AWS WAF to protect against SQL injections, choosing the right field to match is crucial. Among the options provided (all_query_arguments, body, cookies, header_order, headers, ja3_fingerprint, json_body, method, query_string, single_header, single_query_argument, uri_path), the most effective choice can depend on the specifics of your application and where you expect SQL injection attempts to occur.</description>
    </item>
    
  </channel>
</rss>
