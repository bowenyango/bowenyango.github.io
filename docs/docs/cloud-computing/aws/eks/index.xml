<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Novel CS</title>
    <link>https://example.org/docs/cloud-computing/aws/eks/</link>
    <description>Recent content on Novel CS</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://example.org/docs/cloud-computing/aws/eks/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://example.org/docs/cloud-computing/aws/eks/cluster/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/cloud-computing/aws/eks/cluster/</guid>
      <description>Cluster in Amazon Elastic Kubernetes Service (EKS) # Overview # Amazon Elastic Kubernetes Service (EKS) is a managed service that makes it easy to run Kubernetes on AWS without needing to install and operate your own Kubernetes control plane or worker nodes.
What is a Cluster? # In the context of Amazon EKS, a cluster refers to the Kubernetes control plane and the compute infrastructure it manages. The control plane runs in an account managed by AWS, and the user manages the compute infrastructure.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://example.org/docs/cloud-computing/aws/eks/deployment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/cloud-computing/aws/eks/deployment/</guid>
      <description>Deployment in Kubernetes (K8s) # What is a Deployment? # A Deployment in Kubernetes is a resource object that provides declarative updates to applications. It allows you to describe an applicationâ€™s life cycle, such as which images to use for the app, the number of pods there should be, and the way to update them, among other aspects.
Key Features of Deployment # Replica Management: Deployments allow you to specify how many replicas (copies) of a pod should be running.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://example.org/docs/cloud-computing/aws/eks/pod/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/cloud-computing/aws/eks/pod/</guid>
      <description>Pod in Amazon Elastic Kubernetes Service (EKS) # Overview # A pod in Amazon Elastic Kubernetes Service (EKS) is the smallest and most basic deployable object in Kubernetes. It represents a single instance of a process running in your cluster.
Understanding Pods # Fundamental Unit of Deployment: Pods are the basic building blocks of Kubernetes applications. Containers Within Pods: Each pod can contain one or more containers, usually with closely related functionality.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://example.org/docs/cloud-computing/aws/eks/podtemplate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/cloud-computing/aws/eks/podtemplate/</guid>
      <description> PodTemplates in Amazon Elastic Kubernetes Service (EKS) # Overview # PodTemplates are specifications for creating Pods within Kubernetes, and by extension, in Amazon Elastic Kubernetes Service (EKS). They are templates that describe the desired state of a pod.
Understanding PodTemplates # A PodTemplate is embedded in workload resources like Deployments, StatefulSets, and Jobs. The template contains specifications for pod creation, such as containers, volumes, and labels.
Structure of a PodTemplate # apiVersion: version kind: ResourceType metadata: name: name spec: template: metadata: labels: key: value spec: containers: - name: containerName image: containerImage ports: - containerPort: port </description>
    </item>
    
    <item>
      <title></title>
      <link>https://example.org/docs/cloud-computing/aws/eks/replicasets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/cloud-computing/aws/eks/replicasets/</guid>
      <description>ReplicaSets in Amazon Elastic Kubernetes Service (EKS) # Overview # ReplicaSets are a fundamental workload management resource in Kubernetes, and by extension, in Amazon Elastic Kubernetes Service (EKS). They ensure that a specified number of pod replicas are running at any given time.
Purpose of ReplicaSets # Maintain Stability: ReplicaSets maintain a stable set of replica Pods running at any given time. Self-Healing: If a pod fails, the ReplicaSet replaces it to maintain the desired state.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://example.org/docs/cloud-computing/aws/eks/statefulsets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/cloud-computing/aws/eks/statefulsets/</guid>
      <description>1. What is statefulSet? # StatefulSets in Kubernetes (K8s) is a workload API object used for managing stateful applications. It manages the deployment and scaling of a set of Pods and provides guarantees about the ordering and uniqueness of these Pods. Unlike a Deployment, a StatefulSet maintains a sticky identity for each of their Pods. This feature is particularly important for stateful applications that require stable, unique network identifiers, stable persistent storage, and ordered, graceful deployment and scaling.</description>
    </item>
    
  </channel>
</rss>
