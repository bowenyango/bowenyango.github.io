<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docs on Novel CS</title>
    <link>https://example.org/docs/</link>
    <description>Recent content in Docs on Novel CS</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://example.org/docs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://example.org/docs/api-architectural-styles/graphql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/api-architectural-styles/graphql/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://example.org/docs/api-architectural-styles/grpc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/api-architectural-styles/grpc/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://example.org/docs/api-architectural-styles/restful/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/api-architectural-styles/restful/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://example.org/docs/api-architectural-styles/websocket/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/api-architectural-styles/websocket/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://example.org/docs/book-reading/system-design-alex-xu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/book-reading/system-design-alex-xu/</guid>
      <description>Chapter One: SCALE FROM ZERO TO MILLIONS OF USERS # Cache Eviction Policy # Eviction Policy: Once the cache is full, any requests to add items to the cache might cause existing items to be removed. This is called cache eviction. Least-recently-used (LRU) is the most popular cache eviction policy. Other eviction policies, such as the Least Frequently Used (LFU) or First in First Out (FIFO), can be adopted to satisfy different use cases.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://example.org/docs/containerization/docker/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/containerization/docker/configuration/</guid>
      <description>Hostname VS Container Name # ECS Link Container # Host Port = 0 # In an AWS ECS (Elastic Container Service) task definition, if you set the host port as 0 in the port mapping of a container definition, it enables dynamic port mapping. This means that ECS will automatically assign an available port from the EC2 instance (or the underlying infrastructure) to the container.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://example.org/docs/containerization/docker/docker-engine/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/containerization/docker/docker-engine/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://example.org/docs/containerization/docker/dockershim/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/containerization/docker/dockershim/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://example.org/docs/containerization/docker/entrypoint_and_command/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/containerization/docker/entrypoint_and_command/</guid>
      <description>What is the difference between CMD and ENTRYPOINT? # Docker has a default entrypoint which is /bin/sh -c but does not have a default command.
When you run docker like this: docker run -i -t ubuntu bash the entrypoint is the default /bin/sh -c, the image is ubuntu and the command is bash.
The command is run via the entrypoint. i.e., the actual thing that gets executed is /bin/sh -c bash.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://example.org/docs/containerization/kubernetes/containerd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/containerization/kubernetes/containerd/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://example.org/docs/containerization/kubernetes/kubelet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/containerization/kubernetes/kubelet/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://example.org/docs/math/algorithm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/math/algorithm/</guid>
      <description> Newton&amp;rsquo;s Method Equation # </description>
    </item>
    
    <item>
      <title></title>
      <link>https://example.org/docs/programming-languages/closure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/programming-languages/closure/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://example.org/docs/programming-languages/go/go/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/programming-languages/go/go/</guid>
      <description>xmapf, err := p.Lookup(&amp;quot;Map&amp;quot;) can I use the xmapf as a function directly? # In Go, when you use the plugin.Lookup method, it returns a plugin.Symbol, which is a type alias for interface{}. This means that the returned value is of type interface{} and doesn&amp;rsquo;t have a concrete type until you use a type assertion.
You cannot use xmapf and xreducef directly as functions because they are of type interface{}.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://example.org/docs/programming-languages/go/reflect/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/programming-languages/go/reflect/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://example.org/docs/programming-languages/issues/loop-variable-in-goroutine/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/programming-languages/issues/loop-variable-in-goroutine/</guid>
      <description>Summary of the Loop Variable Capturing Issue in Goroutines Closure # Problem Description # In Go, when using a for loop to iterate over elements and launching goroutines within the loop, a common issue arises due to the loop variable being reused across all iterations. Since the loop variable (req in our example) is allocated once and its memory address remains constant, all goroutines that capture this variable end up referencing the same memory location.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://example.org/docs/programming-languages/late-static-binding/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/programming-languages/late-static-binding/</guid>
      <description>Late static binding (LSB) is a feature primarily associated with dynamically typed languages like PHP. It allows static methods and properties to be resolved at runtime based on the calling class context, rather than the class in which they were defined.
Languages with Late Static Binding # PHP: PHP is the most well-known language that supports late static binding using the static keyword. Languages with Early Static Binding # Early static binding is more common in statically typed languages, where static methods and properties are resolved at compile-time based on the class in which they were defined.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://example.org/docs/programming-thoughts/code-database-synchronization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/programming-thoughts/code-database-synchronization/</guid>
      <description>Service Code and Database Schema Synchronization in Production Environment # To ensure that your microservices on AWS ECS and your database schema updates are synchronized effectively without causing service disruptions or inconsistencies, you can consider the following approaches:
1. Implement a Blue-Green Deployment Strategy # Useful when the databases and code are not backward/forward compatible.
Prepare a Green environment with the new code and the updated schema while the Blue environment continues to run the old code and schema.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://example.org/docs/programming-thoughts/microservice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/programming-thoughts/microservice/</guid>
      <description>Monolithic VS Microservice # In a monolithic architecture, the components interact directly within a single application instance, often sharing data in-memory or through internal function calls.
In contrast, in a microservices architecture, different services are typically deployed on separate servers or environments and communicate through network calls, often using HTTP requests.
Scalability # Monolithic`: Scaling requires scaling the entire application, even if only one part of the application needs more resources.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://example.org/docs/shell/commands/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/shell/commands/</guid>
      <description>Here String # diff &amp;lt;(echo &amp;#34;string1&amp;#34;) &amp;lt;(echo &amp;#34;string2&amp;#34;) &amp;lt;(echo &amp;quot;string&amp;quot;) construct creates a temporary file-like object that contains the string.
So in this way, we can walk around the file as input requirement of diff command.
Checking the exit status of ANY command in a pipeline # It&amp;rsquo;s a pretty common thing in a shell script to want to check the exit status of the previous command. You can do this with the $?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://example.org/docs/shell/curl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/shell/curl/</guid>
      <description>How to send HTTPS request with curl? # To send an HTTPS request using Curl, pass the destination endpoint that supports SSL connections on the Curl command line. Curl will automatically establish an SSL connection with the server. When Curl sends a request to an HTTPS URL, it checks the SSL certificate against the certificate store of the local CA. Curl returns the error message Certificate Verify Failed for expired and self-signed certificates.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://example.org/docs/shell/grep/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/shell/grep/</guid>
      <description>grep failed with exit code 1 in CircleCI workflow # grep will throw an error when nothing matched $ echo &amp;#34;anything&amp;#34; | grep a a $ echo $? 0 $ echo &amp;#34;anything&amp;#34; | grep b $ echo $? 1 This command behaves the same across different system environments.
How to make grep return 0 if nothing matched? # Add || true. If the first part of the command &amp;ldquo;fails&amp;rdquo; (meaning grep e returns a non-zero exit code) then the part after the || is executed, succeeds and returns zero as the exit code (true always returns zero).</description>
    </item>
    
    <item>
      <title></title>
      <link>https://example.org/docs/shell/ssh/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/shell/ssh/</guid>
      <description> Use SSH to run command remotely # ssh &amp;lt;&amp;lt; redis_instance__username &amp;gt;&amp;gt;@&amp;lt;&amp;lt; redis_instance__hostname &amp;gt;&amp;gt; \ &amp;#34;redis-cli -h &amp;lt;&amp;lt; parameters.redis_host &amp;gt;&amp;gt; -p &amp;lt;&amp;lt; parameters.redis_port &amp;gt;&amp;gt; FLUSHALL&amp;#34; </description>
    </item>
    
  </channel>
</rss>
