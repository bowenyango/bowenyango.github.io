<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Novel CS</title>
    <link>https://example.org/docs/web-development/backend-techs/web-security/</link>
    <description>Recent content on Novel CS</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://example.org/docs/web-development/backend-techs/web-security/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://example.org/docs/web-development/backend-techs/web-security/captcha-recaptcha/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/web-development/backend-techs/web-security/captcha-recaptcha/</guid>
      <description>TBD</description>
    </item>
    
    <item>
      <title></title>
      <link>https://example.org/docs/web-development/backend-techs/web-security/command-injection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/web-development/backend-techs/web-security/command-injection/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://example.org/docs/web-development/backend-techs/web-security/csrf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/web-development/backend-techs/web-security/csrf/</guid>
      <description>What is CSRF(Cross-Site Request Forgery)? # CSRF stands for Cross-Site Request Forgery, which is a type of security vulnerability typically found in web applications. It allows an attacker to induce users to perform actions that they do not intend to do. A CSRF attack specifically targets state-changing requests, not theft of data, since the attacker has no way to see the response to the forged request.
Here&amp;rsquo;s a basic example of how CSRF could work:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://example.org/docs/web-development/backend-techs/web-security/sql-injection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/web-development/backend-techs/web-security/sql-injection/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://example.org/docs/web-development/backend-techs/web-security/ssl-tls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/web-development/backend-techs/web-security/ssl-tls/</guid>
      <description>How the SSL/TLS is used when users access websites via HTTPS? # SSL/TLS (Secure Sockets Layer/Transport Layer Security) is a protocol for securing internet communications. It&amp;rsquo;s used extensively for securing data transfer, especially in HTTPS, which is the secure version of HTTP used for web browsing. Here&amp;rsquo;s a simplified overview of how SSL/TLS works when you access a website via HTTPS:
Client-Server Handshake Initiation
Client Hello: When you enter an HTTPS URL in your browser (the client), it initiates a connection to the server hosting the website.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://example.org/docs/web-development/backend-techs/web-security/xss/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/web-development/backend-techs/web-security/xss/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
